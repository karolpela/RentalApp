@page "/new-rental"
@using Microsoft.IdentityModel.Tokens
@using RentalApp.Shared.Models
@using RentalApp.Shared.Models.Equipment
@using System.Text.RegularExpressions

<PageTitle>New rental</PageTitle>

<RadzenCard class="bg-card" Style="max-width: 700px; width: 100%">
<RadzenText Text="New rental" TextAlign="TextAlign.Center" TextStyle="TextStyle.H3" TagName="TagName.H1"/>
<RadzenTemplateForm TItem="Rental" @ref="templateForm" Data="@rental">
<RadzenStack Gap="1rem">
<RadzenFieldset Text="Rental">
    <RadzenStack>
        <RadzenRow>
            <RadzenColumn>
                <RadzenStack Gap="1.25rem">
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Client" Component="ClientId"/>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenDropDown
                                @bind-Value="Client" TValue="Person"
                                AllowClear="false" Placeholder="Select client" Data="@allClients"
                                Style="width: 100%" TextProperty="FirstName" Name="ClientId"
                                AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                Change="@(() => { peselInSystem = !Client?.Pesel.IsNullOrEmpty() ?? false; pesel = Client?.Pesel; templateForm!.EditContext?.Validate();})">
                                <Template Context="clientContext">
                                    @($"{(clientContext as Person)!.FirstName} " +
                                      $"{(clientContext as Person)!.LastName} " +
                                      $"({(clientContext as Person)!.PhoneNumber})")
                                </Template>
                            </RadzenDropDown>
                            <RadzenRequiredValidator Component="ClientId" Text="Client required" Style="display: block; position: absolute"/>
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Equipment" Component="EquipmentId"/>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenDropDown
                                @bind-Value="Equipment" TValue="SportsEquipment"
                                AllowClear="false" Placeholder="Select equipment"
                                Data="@availableEquipment" Style="width: 100%" TextProperty="Purpose"
                                Name="EquipmentId" AllowFiltering="true"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                Change="@(() => templateForm!.EditContext?.Validate())">
                                <Template Context="equipmentContext">
                                    @($"{(equipmentContext as SportsEquipment)!.Purpose} " +
                                      $"{Regex.Replace((equipmentContext as SportsEquipment)!.Discriminator ?? string.Empty, "(?<=[a-z])([A-Z])", " $1")} " +
                                      $"{(equipmentContext as SportsEquipment)!.Size} " +
                                      $"({(equipmentContext as SportsEquipment)!.Id})")
                                </Template>
                            </RadzenDropDown>
                            <RadzenRequiredValidator
                                Component="EquipmentId" Text="Equipment required" Style="display: block; position: absolute"/>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn>
                <RadzenStack Gap="1.25rem">
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="2" OffsetMD="1">
                            <RadzenLabel Text="Start" Component="StartDate"/>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="9">
                            <RadzenDatePicker
                                Style="width: 100%" @bind-Value="startDate" Name="StartDate"
                                ShowTime="true" ShowSeconds="false"
                                HourFormat="24" DateFormat="yyyy-MM-dd    HH:mm"
                                Change="@(() => templateForm?.EditContext?.Validate())"/>
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="2" OffsetMD="1">
                            <RadzenLabel Text="End" Component="EndDate"/>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="9">
                            <RadzenDatePicker
                                Style="width: 100%" @bind-Value="scheduledEndDate" Name="EndDate"
                                ShowTime="true" ShowSeconds="false"
                                HourFormat="24" DateFormat="yyyy-MM-dd    HH:mm"/>
                            <RadzenCustomValidator Text="End date has to be greater than start date" Component="EndDate" Validator="@(() => scheduledEndDate > startDate)" Style="display: block"></RadzenCustomValidator>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow>
            <RadzenColumn Size="6">
                <RadzenText
                    Text=@($"per day: PLN {DailyEquipmentCost}")
                    Style="color: #8f8f8f">
                </RadzenText>
            </RadzenColumn>
            <RadzenColumn Size="6">
                <RadzenRow >
                    <RadzenColumn Size="9" Offset="3">
                        <RadzenText
                            Text=@($"base total: PLN {TotalEquipmentCost}")
                            Visible="@(TotalHours > 0)">
                        </RadzenText>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenColumn>
        </RadzenRow>
    </RadzenStack>
</RadzenFieldset>
<RadzenFieldset Text="Insurance">
    <RadzenStack Gap="1rem">
        <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Gap="1rem">
            <RadzenColumn Size="12" SizeSM="6">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Style="height: 36px">
                    <RadzenCheckBox @bind-Value="@InsuranceWanted" Name="InsuranceCheckbox"/>
                    <RadzenLabel Text="Insurance wanted" Component="InsuranceCheckbox"/>
                </RadzenStack>
                <RadzenCustomValidator
                    Text="Performance equipment requires insurance"
                    Component="InsuranceCheckbox"
                    Validator="@(() => Equipment?.Purpose != "Performance" || InsuranceWanted)"
                    Style="display: block; position: absolute">
                </RadzenCustomValidator>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeSM="6">
                <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                    <RadzenColumn Size="12" SizeMD="2" OffsetMD="1">
                        <RadzenLabel Text="PESEL" Component="Pesel"/>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="9">
                        <RadzenTextBox
                            Name="Pesel" @bind-Value="pesel" MaxLength="11"
                            ReadOnly="false" Disabled="@(peselInSystem)"
                            Style="width: 100%">
                        </RadzenTextBox>
                        <RadzenCustomValidator
                            Text="Insurance requires a PESEL no." Component="Pesel"
                            Validator="@(() => !insuranceWanted || !pesel.IsNullOrEmpty())"
                            Style="display: block; position: absolute">
                        </RadzenCustomValidator>
                        <RadzenCustomValidator
                            Text="Not a valid PESEL no." Component="Pesel"
                            Validator="@(() => pesel == null || Regex.IsMatch(pesel, @"^\d{11}$"))"
                            Style="display: block; position: absolute">
                        </RadzenCustomValidator>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow>
            <RadzenColumn Size="6">
                <RadzenText
                    Text=@($"per day: PLN {Math.Round(DailyInsuranceCost, 2)}")
                    Style="color: #8f8f8f">
                </RadzenText>
            </RadzenColumn>
            <RadzenColumn Size="6">
                <RadzenRow >
                    <RadzenColumn Size="9" Offset="3">
                        <RadzenText
                            Text=@($"insurance total: PLN {Math.Round(TotalInsuranceCost, 2)}")
                            Visible="@(TotalHours > 0)">
                        </RadzenText>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenColumn>
        </RadzenRow>
    </RadzenStack>
</RadzenFieldset>
<RadzenFieldset Text="Protective gear">
    <RadzenStack Gap="1rem">
        <RadzenRow AlignItems="AlignItems.Center">
            <RadzenColumn>
                <RadzenDropDown
                    @bind-Value="selectedGear" Multiple="true" AllowClear="true"
                    Placeholder="Select gear" Data="@availableGear" Style="width: 100%;" ValueProperty="Id"
                    Separator=", " Name="ProtectiveGear">
                    <Template Context="gearContext">
                        @($"{(gearContext as ProtectiveGear)!.Type} {(gearContext as ProtectiveGear)!.Size} ({(gearContext as ProtectiveGear)!.Id})")
                    </Template>
                </RadzenDropDown>
                <RadzenCustomValidator
                    Text="Performance equipment requires protective gear"
                    Component="ProtectiveGear"
                    Validator="@(() => Equipment?.Purpose != "Performance" || !selectedGear.IsNullOrEmpty())"
                    Style="display: block; position: absolute">
                </RadzenCustomValidator>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow>
            <RadzenColumn Size="6">
                <RadzenText
                    Text=@($"per day: PLN {DailyGearCost}") Style="color: #8f8f8f">
                </RadzenText>
            </RadzenColumn>
            <RadzenColumn Size="6">
                <RadzenRow>
                    <RadzenColumn Size="9" Offset="3">
                        <RadzenText
                            Text=@($"gear cost total: PLN {TotalGearCost}")
                            Visible="@(TotalHours > 0)">
                        </RadzenText>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenColumn>
        </RadzenRow>
    </RadzenStack>
</RadzenFieldset>
<RadzenStack
    AlignItems="AlignItems.Center" Gap="1rem">
    <RadzenText
        Text=@($"Total cost: PLN {Math.Round(TotalRentalCost ?? 0, 2)}")
        TextStyle="TextStyle.Body1" Style="text-transform: uppercase; font-weight: bold"/>
    <RadzenButton
        Click="AddRentalAsync" ButtonStyle="ButtonStyle.Success" ButtonType="ButtonType.Submit"
        Icon="done" Text="Create rental" Variant="Variant.Filled"
        Disabled="@(rental != null && !templateForm!.IsValid) "/>
</RadzenStack>
</RadzenStack>
</RadzenTemplateForm>
</RadzenCard>